import cv2
import torch
from debayer import Debayer5x5

f = Debayer5x5().cuda()


class TVLoss(torch.nn.Module):  # реализует операцию регуляризации, называемую Total Variation Loss
    # Он работает путем минимизации разницы между соседними пикселями в изображении.
    def forward(self, y):
        print("y len = ", len(y.shape))
        print("y.shape", y.shape)
        if (len(y.shape) == 4):
            print("y val  = ", y[0][0][0][0])
        with torch.no_grad():
            x = f(y)
        print("x shape", x.shape)
        print("x val =", x[0][0][0][0])
        x = torch.log(x + 1e-3)  # Входной тензор x сначала преобразуется с
        # помощью логарифмической функции для стабилизации
        # значений и предотвращения потенциального деления на ноль
        h_tv = torch.pow((x[:, :, 1:, :] - x[:, :, :-1, :]), 2)
        w_tv = torch.pow((x[:, :, :, 1:] - x[:, :, :, :-1]), 2)  # Вычисляются разницы между значениями
        print("return result = ", torch.mean(h_tv) + torch.mean(w_tv))
        # соседних пикселей по вертикали и горизонтали соответственно
        return torch.mean(h_tv) + torch.mean(w_tv)  # Рассчитывается среднее значение квадратов вертикальных и
        # горизонтальных разностей между соседними
        # пикселями, а затем эти значения суммируются
        # для создания общей TV Loss


'''
Этот метод эффективно сглаживает изображение,
уменьшая разницу между соседними пикселями. В
результате обычно уменьшается эффект шума и
улучшается визуальное качество изображения.
TV Loss является одним из методов регуляризации,
который помогает предотвратить переобучение
модели на шумных деталях изображения
'''
